const [AakultaHelmetIsShown, setAakultaHelmetIsShown] = useState(false)
const [AakultaHelmetActive, setAakultaHelmetActive] = useState(false)
const [AakultaHelmetAtk, setAakultaHelmetAtk] = useState(0)
const [AakultaHelmetDef, setAakultaHelmetDef] = useState(0)
const [AakultaHelmetLuck, setAakultaHelmetLuck] = useState(0)


const handleAakultaHelmetClick = event => {

   setAakultaHelmetIsShown (current => !AakultaHelmetIsShown);
   setAakultaHelmetActive (current => !AakultaHelmetActive);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 3);
   setAakultaHelmetLuck (value => 6);

   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleAakultaHelmetNoClick = event => {
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
}

const [CrestedHelmetIsShown, setCrestedHelmetIsShown] = useState(false)
const [CrestedHelmetActive, setCrestedHelmetActive] = useState(false)
const [CrestedHelmetAtk, setCrestedHelmetAtk] = useState(0)
const [CrestedHelmetDef, setCrestedHelmetDef] = useState(0)
const [CrestedHelmetLuck, setCrestedHelmetLuck] = useState(0)


const handleCrestedHelmetClick = event => {



   setCrestedHelmetIsShown (current => !CrestedHelmetIsShown);
   setCrestedHelmetActive (current => !CrestedHelmetActive);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 5);
 
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleCrestedHelmetNoClick = event => {
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
}

const [DarkForestHelmetIsShown, setDarkForestHelmetIsShown] = useState(false)
const [DarkForestHelmetActive, setDarkForestHelmetActive] = useState(false)
const [DarkForestHelmetAtk, setDarkForestHelmetAtk] = useState(0)
const [DarkForestHelmetDef, setDarkForestHelmetDef] = useState(0)
const [DarkForestHelmetLuck, setDarkForestHelmetLuck] = useState(0)


const handleDarkForestHelmetClick = event => {



   setDarkForestHelmetIsShown (current => !DarkForestHelmetIsShown);
   setDarkForestHelmetActive (current => !DarkForestHelmetActive);
   setDarkForestHelmetAtk (value => 14);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleDarkForestHelmetNoClick = event => {
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
}

const [DragonHornedHelmetIsShown, setDragonHornedHelmetIsShown] = useState(false)
const [DragonHornedHelmetActive, setDragonHornedHelmetActive] = useState(false)
const [DragonHornedHelmetAtk, setDragonHornedHelmetAtk] = useState(0)
const [DragonHornedHelmetDef, setDragonHornedHelmetDef] = useState(0)
const [DragonHornedHelmetLuck, setDragonHornedHelmetLuck] = useState(0)


const handleDragonHornedHelmetClick = event => {



   setDragonHornedHelmetIsShown (current => !DragonHornedHelmetIsShown);
   setDragonHornedHelmetActive (current => !DragonHornedHelmetActive);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 10);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleDragonHornedHelmetNoClick = event => {
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
}

const [FabricHelmetIsShown, setFabricHelmetIsShown] = useState(false)
const [FabricHelmetActive, setFabricHelmetActive] = useState(false)
const [FabricHelmetAtk, setFabricHelmetAtk] = useState(0)
const [FabricHelmetDef, setFabricHelmetDef] = useState(0)
const [FabricHelmetLuck, setFabricHelmetLuck] = useState(0)


const handleFabricHelmetClick = event => {


   setFabricHelmetIsShown (current => !FabricHelmetIsShown);
   setFabricHelmetActive (current => !FabricHelmetActive);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 4);
   setFabricHelmetLuck (value => 12);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleFabricHelmetNoClick = event => {
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
}

const [GlassNecklaceIsShown, setGlassNecklaceIsShown] = useState(false)
const [GlassNecklaceActive, setGlassNecklaceActive] = useState(false)
const [GlassNecklaceAtk, setGlassNecklaceAtk] = useState(0)
const [GlassNecklaceDef, setGlassNecklaceDef] = useState(0)
const [GlassNecklaceLuck, setGlassNecklaceLuck] = useState(0)


const handleGlassNecklaceClick = event => {


   setGlassNecklaceIsShown (current => !GlassNecklaceIsShown);
   setGlassNecklaceActive (current => !GlassNecklaceActive);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 3);
   setGlassNecklaceLuck (value => 6);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGlassNecklaceNoClick = event => {
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
}

const [GoldenDragonTiaraIsShown, setGoldenDragonTiaraIsShown] = useState(false)
const [GoldenDragonTiaraActive, setGoldenDragonTiaraActive] = useState(false)
const [GoldenDragonTiaraAtk, setGoldenDragonTiaraAtk] = useState(0)
const [GoldenDragonTiaraDef, setGoldenDragonTiaraDef] = useState(0)
const [GoldenDragonTiaraLuck, setGoldenDragonTiaraLuck] = useState(0)


const handleGoldenDragonTiaraClick = event => {


   setGoldenDragonTiaraIsShown (current => !GoldenDragonTiaraIsShown);
   setGoldenDragonTiaraActive (current => !GoldenDragonTiaraActive);
   setGoldenDragonTiaraAtk (value => 2);
   setGoldenDragonTiaraDef (value => 2);
   setGoldenDragonTiaraLuck (value => 8);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGoldenDragonTiaraNoClick = event => {
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
}

const [HauntedNecklaceIsShown, setHauntedNecklaceIsShown] = useState(false)
const [HauntedNecklaceActive, setHauntedNecklaceActive] = useState(false)
const [HauntedNecklaceAtk, setHauntedNecklaceAtk] = useState(0)
const [HauntedNecklaceDef, setHauntedNecklaceDef] = useState(0)
const [HauntedNecklaceLuck, setHauntedNecklaceLuck] = useState(0)


const handleHauntedNecklaceClick = event => {


   setHauntedNecklaceIsShown (current => !HauntedNecklaceIsShown);
   setHauntedNecklaceActive (current => !HauntedNecklaceActive);
   setHauntedNecklaceAtk (value => 5);
   setHauntedNecklaceDef (value => 10);
   setHauntedNecklaceLuck (value => 5);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleHauntedNecklaceNoClick = event => {
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
}

const [HopeLightIsShown, setHopeLightIsShown] = useState(false)
const [HopeLightActive, setHopeLightActive] = useState(false)
const [HopeLightAtk, setHopeLightAtk] = useState(0)
const [HopeLightDef, setHopeLightDef] = useState(0)
const [HopeLightLuck, setHopeLightLuck] = useState(0)


const handleHopeLightClick = event => {


   setHopeLightIsShown (current => !HopeLightIsShown);
   setHopeLightActive (current => !HopeLightActive);
   setHopeLightAtk (value => 15);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleHopeLightNoClick = event => {
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
}

const [LightBloomIsShown, setLightBloomIsShown] = useState(false)
const [LightBloomActive, setLightBloomActive] = useState(false)
const [LightBloomAtk, setLightBloomAtk] = useState(0)
const [LightBloomDef, setLightBloomDef] = useState(0)
const [LightBloomLuck, setLightBloomLuck] = useState(0)


const handleLightBloomClick = event => {


   setLightBloomIsShown (current => !LightBloomIsShown);
   setLightBloomActive (current => !LightBloomActive);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 15);
   setLightBloomLuck (value => 0);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleLightBloomNoClick = event => {
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
}

const [MushroomGrenadeIsShown, setMushroomGrenadeIsShown] = useState(false)
const [MushroomGrenadeActive, setMushroomGrenadeActive] = useState(false)
const [MushroomGrenadeAtk, setMushroomGrenadeAtk] = useState(0)
const [MushroomGrenadeDef, setMushroomGrenadeDef] = useState(0)
const [MushroomGrenadeLuck, setMushroomGrenadeLuck] = useState(0)


const handleMushroomGrenadeClick = event => {


   setMushroomGrenadeIsShown (current => !MushroomGrenadeIsShown);
   setMushroomGrenadeActive (current => !MushroomGrenadeActive);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 12);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleMushroomGrenadeNoClick = event => {
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
}

const [NivaliGlovesIsShown, setNivaliGlovesIsShown] = useState(false)
const [NivaliGlovesActive, setNivaliGlovesActive] = useState(false)
const [NivaliGlovesAtk, setNivaliGlovesAtk] = useState(0)
const [NivaliGlovesDef, setNivaliGlovesDef] = useState(0)
const [NivaliGlovesLuck, setNivaliGlovesLuck] = useState(0)


const handleNivaliGlovesClick = event => {


   setNivaliGlovesIsShown (current => !NivaliGlovesIsShown);
   setNivaliGlovesActive (current => !NivaliGlovesActive);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 10);
   setNivaliGlovesLuck (value => 5);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleNivaliGlovesNoClick = event => {
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
}

const [NivaliPantsIsShown, setNivaliPantsIsShown] = useState(false)
const [NivaliPantsActive, setNivaliPantsActive] = useState(false)
const [NivaliPantsAtk, setNivaliPantsAtk] = useState(0)
const [NivaliPantsDef, setNivaliPantsDef] = useState(0)
const [NivaliPantsLuck, setNivaliPantsLuck] = useState(0)


const handleNivaliPantsClick = event => {


   setNivaliPantsIsShown (current => !NivaliPantsIsShown);
   setNivaliPantsActive (current => !NivaliPantsActive);
   setNivaliPantsAtk (value => 4);
   setNivaliPantsDef (value => 12);
   setNivaliPantsLuck (value => 4);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleNivaliPantsNoClick = event => {
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
}

const [NivaliShieldIsShown, setNivaliShieldIsShown] = useState(false)
const [NivaliShieldActive, setNivaliShieldActive] = useState(false)
const [NivaliShieldAtk, setNivaliShieldAtk] = useState(0)
const [NivaliShieldDef, setNivaliShieldDef] = useState(0)
const [NivaliShieldLuck, setNivaliShieldLuck] = useState(0)


const handleNivaliShieldClick = event => {


   setNivaliShieldIsShown (current => !NivaliShieldIsShown);
   setNivaliShieldActive (current => !NivaliShieldActive);
   setNivaliShieldAtk (value => 2);
   setNivaliShieldDef (value => 15);
   setNivaliShieldLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleNivaliShieldNoClick = event => {
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
}

const [RainaBraceletIsShown, setRainaBraceletIsShown] = useState(false)
const [RainaBraceletActive, setRainaBraceletActive] = useState(false)
const [RainaBraceletAtk, setRainaBraceletAtk] = useState(0)
const [RainaBraceletDef, setRainaBraceletDef] = useState(0)
const [RainaBraceletLuck, setRainaBraceletLuck] = useState(0)


const handleRainaBraceletClick = event => {


   setRainaBraceletIsShown (current => !RainaBraceletIsShown);
   setRainaBraceletActive (current => !RainaBraceletActive);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 15);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleRainaBraceletNoClick = event => {
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
}

const [RustyAmuletIsShown, setRustyAmuletIsShown] = useState(false)
const [RustyAmuletActive, setRustyAmuletActive] = useState(false)
const [RustyAmuletAtk, setRustyAmuletAtk] = useState(0)
const [RustyAmuletDef, setRustyAmuletDef] = useState(0)
const [RustyAmuletLuck, setRustyAmuletLuck] = useState(0)


const handleRustyAmuletClick = event => {


   setRustyAmuletIsShown (current => !RustyAmuletIsShown);
   setRustyAmuletActive (current => !RustyAmuletActive);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 1);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleRustyAmuletNoClick = event => {
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
}

const [RustyPendantIsShown, setRustyPendantIsShown] = useState(false)
const [RustyPendantActive, setRustyPendantActive] = useState(false)
const [RustyPendantAtk, setRustyPendantAtk] = useState(0)
const [RustyPendantDef, setRustyPendantDef] = useState(0)
const [RustyPendantLuck, setRustyPendantLuck] = useState(0)


const handleRustyPendantClick = event => {   


   setRustyPendantIsShown (current => !RustyPendantIsShown);
   setRustyPendantActive (current => !RustyPendantActive);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 1);
   setRustyPendantLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleRustyPendantNoClick = event => {
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
}

const [SandsRingIsShown, setSandsRingIsShown] = useState(false)
const [SandsRingActive, setSandsRingActive] = useState(false)
const [SandsRingAtk, setSandsRingAtk] = useState(0)
const [SandsRingDef, setSandsRingDef] = useState(0)
const [SandsRingLuck, setSandsRingLuck] = useState(0)


const handleSandsRingClick = event => {


   setSandsRingIsShown (current => !SandsRingIsShown);
   setSandsRingActive (current => !SandsRingActive);
   setSandsRingAtk (value => 1);
   setSandsRingDef (value => 5);
   setSandsRingLuck (value => 5);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleSandsRingNoClick = event => {
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
}

const [VictorianFanIsShown, setVictorianFanIsShown] = useState(false)
const [VictorianFanActive, setVictorianFanActive] = useState(false)
const [VictorianFanAtk, setVictorianFanAtk] = useState(0)
const [VictorianFanDef, setVictorianFanDef] = useState(0)
const [VictorianFanLuck, setVictorianFanLuck] = useState(0)


const handleVictorianFanClick = event => {


   setVictorianFanIsShown (current => !VictorianFanIsShown);
   setVictorianFanActive (current => !VictorianFanActive);
   setVictorianFanAtk (value => 8);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleVictorianFanNoClick = event => {
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
}

const [GradScrollAstrologyIsShown, setGradScrollAstrologyIsShown] = useState(false)
const [GradScrollAstrologyActive, setGradScrollAstrologyActive] = useState(false)
const [GradScrollAstrologyAtk, setGradScrollAstrologyAtk] = useState(0)
const [GradScrollAstrologyDef, setGradScrollAstrologyDef] = useState(0)
const [GradScrollAstrologyLuck, setGradScrollAstrologyLuck] = useState(0)


const handleGradScrollAstrologyClick = event => {


   setGradScrollAstrologyIsShown (current => !GradScrollAstrologyIsShown);
   setGradScrollAstrologyActive (current => !GradScrollAstrologyActive);
   setGradScrollAstrologyAtk (value => 2);
   setGradScrollAstrologyDef (value => 4);
   setGradScrollAstrologyLuck (value => 6);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollAstrologyNoClick = event => {
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
}

const [GradScrollAlchemyIsShown, setGradScrollAlchemyIsShown] = useState(false)
const [GradScrollAlchemyActive, setGradScrollAlchemyActive] = useState(false)
const [GradScrollAlchemyAtk, setGradScrollAlchemyAtk] = useState(0)
const [GradScrollAlchemyDef, setGradScrollAlchemyDef] = useState(0)
const [GradScrollAlchemyLuck, setGradScrollAlchemyLuck] = useState(0)


const handleGradScrollAlchemyClick = event => {


   setGradScrollAlchemyIsShown (current => !GradScrollAlchemyIsShown);
   setGradScrollAlchemyActive (current => !GradScrollAlchemyActive);
   setGradScrollAlchemyAtk (value => 6);
   setGradScrollAlchemyDef (value => 4);
   setGradScrollAlchemyLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollAlchemyNoClick = event => {
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
}

const [GradScrollAKIsShown, setGradScrollAKIsShown] = useState(false)
const [GradScrollAKActive, setGradScrollAKActive] = useState(false)
const [GradScrollAKAtk, setGradScrollAKAtk] = useState(0)
const [GradScrollAKDef, setGradScrollAKDef] = useState(0)
const [GradScrollAKLuck, setGradScrollAKLuck] = useState(0)


const handleGradScrollAKClick = event => {


   setGradScrollAKIsShown (current => !GradScrollAKIsShown);
   setGradScrollAKActive (current => !GradScrollAKActive);
   setGradScrollAKAtk (value => 4);
   setGradScrollAKDef (value => 6);
   setGradScrollAKLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollAKNoClick = event => {
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
}

const [GradScrollSpellsIsShown, setGradScrollSpellsIsShown] = useState(false)
const [GradScrollSpellsActive, setGradScrollSpellsActive] = useState(false)
const [GradScrollSpellsAtk, setGradScrollSpellsAtk] = useState(0)
const [GradScrollSpellsDef, setGradScrollSpellsDef] = useState(0)
const [GradScrollSpellsLuck, setGradScrollSpellsLuck] = useState(0)


const handleGradScrollSpellsClick = event => {


   setGradScrollSpellsIsShown (current => !GradScrollSpellsIsShown);
   setGradScrollSpellsActive (current => !GradScrollSpellsActive);
   setGradScrollSpellsAtk (value => 6);
   setGradScrollSpellsDef (value => 2);
   setGradScrollSpellsLuck (value => 4);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollSpellsNoClick = event => {
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
}

const [GradScrollMirrorsIsShown, setGradScrollMirrorsIsShown] = useState(false)
const [GradScrollMirrorsActive, setGradScrollMirrorsActive] = useState(false)
const [GradScrollMirrorsAtk, setGradScrollMirrorsAtk] = useState(0)
const [GradScrollMirrorsDef, setGradScrollMirrorsDef] = useState(0)
const [GradScrollMirrorsLuck, setGradScrollMirrorsLuck] = useState(0)


const handleGradScrollMirrorsClick = event => {


   setGradScrollMirrorsIsShown (current => !GradScrollMirrorsIsShown);
   setGradScrollMirrorsActive (current => !GradScrollMirrorsActive);
   setGradScrollMirrorsAtk (value => 2);
   setGradScrollMirrorsDef (value => 5);
   setGradScrollMirrorsLuck (value => 8);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollMirrorsNoClick = event => {
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
}

const [GradScrollFungiIsShown, setGradScrollFungiIsShown] = useState(false)
const [GradScrollFungiActive, setGradScrollFungiActive] = useState(false)
const [GradScrollFungiAtk, setGradScrollFungiAtk] = useState(0)
const [GradScrollFungiDef, setGradScrollFungiDef] = useState(0)
const [GradScrollFungiLuck, setGradScrollFungiLuck] = useState(0)


const handleGradScrollFungiClick = event => {


   setGradScrollFungiIsShown (current => !GradScrollFungiIsShown);
   setGradScrollFungiActive (current => !GradScrollFungiActive);
   setGradScrollFungiAtk (value => 8);
   setGradScrollFungiDef (value => 5);
   setGradScrollFungiLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);  
}

const handleGradScrollFungiNoClick = event => {
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
}

const [GradScrollThreadsIsShown, setGradScrollThreadsIsShown] = useState(false)
const [GradScrollThreadsActive, setGradScrollThreadsActive] = useState(false)
const [GradScrollThreadsAtk, setGradScrollThreadsAtk] = useState(0)
const [GradScrollThreadsDef, setGradScrollThreadsDef] = useState(0)
const [GradScrollThreadsLuck, setGradScrollThreadsLuck] = useState(0)


const handleGradScrollThreadsClick = event => {


   setGradScrollThreadsIsShown (current => !GradScrollThreadsIsShown);
   setGradScrollThreadsActive (current => !GradScrollThreadsActive);
   setGradScrollThreadsAtk (value => 5);
   setGradScrollThreadsDef (value => 8);
   setGradScrollThreadsLuck (value => 2);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
}

const handleGradScrollThreadsNoClick = event => {
   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);
}

const [GradScrollVoidIsShown, setGradScrollVoidIsShown] = useState(false)
const [GradScrollVoidActive, setGradScrollVoidActive] = useState(false)
const [GradScrollVoidAtk, setGradScrollVoidAtk] = useState(0)
const [GradScrollVoidDef, setGradScrollVoidDef] = useState(0)
const [GradScrollVoidLuck, setGradScrollVoidLuck] = useState(0)

const handleGradScrollVoidClick = event => {
   setGradScrollVoidIsShown (current => !GradScrollVoidIsShown);
   setGradScrollVoidActive (current => !GradScrollVoidActive);
   setGradScrollVoidAtk (value => 8);
   setGradScrollVoidDef (value => 2);
   setGradScrollVoidLuck (value => 5);

   setGradScrollThreadsIsShown (current => false);
   setGradScrollThreadsActive (current => false);
   setGradScrollThreadsAtk (value => 0);
   setGradScrollThreadsDef (value => 0);
   setGradScrollThreadsLuck (value => 0);
   
   setAakultaHelmetIsShown (current => false);
   setAakultaHelmetActive (current => false);
   setAakultaHelmetAtk (value => 0);
   setAakultaHelmetDef (value => 0);
   setAakultaHelmetLuck (value => 0);
   setCrestedHelmetIsShown (current => false);
   setCrestedHelmetActive (current => false);
   setCrestedHelmetAtk (value => 0);
   setCrestedHelmetDef (value => 0);
   setCrestedHelmetLuck (value => 0);
   setDarkForestHelmetIsShown (current => false);
   setDarkForestHelmetActive (current => false);
   setDarkForestHelmetAtk (value => 0);
   setDarkForestHelmetDef (value => 0);
   setDarkForestHelmetLuck (value => 0);
   setDragonHornedHelmetIsShown (current => false);
   setDragonHornedHelmetActive (current => false);
   setDragonHornedHelmetAtk (value => 0);
   setDragonHornedHelmetDef (value => 0);
   setDragonHornedHelmetLuck (value => 0);
   setFabricHelmetIsShown (current => false);
   setFabricHelmetActive (current => false);
   setFabricHelmetAtk (value => 0);
   setFabricHelmetDef (value => 0);
   setFabricHelmetLuck (value => 0);
   setGlassNecklaceIsShown (current => false);
   setGlassNecklaceActive (current => false);
   setGlassNecklaceAtk (value => 0);
   setGlassNecklaceDef (value => 0);
   setGlassNecklaceLuck (value => 0);
   setGoldenDragonTiaraIsShown (current => false);
   setGoldenDragonTiaraActive (current => false);
   setGoldenDragonTiaraAtk (value => 0);
   setGoldenDragonTiaraDef (value => 0);
   setGoldenDragonTiaraLuck (value => 0);
   setHauntedNecklaceIsShown (current => false);
   setHauntedNecklaceActive (current => false);
   setHauntedNecklaceAtk (value => 0);
   setHauntedNecklaceDef (value => 0);
   setHauntedNecklaceLuck (value => 0);
   setHopeLightIsShown (current => false);
   setHopeLightActive (current => false);
   setHopeLightAtk (value => 0);
   setHopeLightDef (value => 0);
   setHopeLightLuck (value => 0);
   setLightBloomIsShown (current => false);
   setLightBloomActive (current => false);
   setLightBloomAtk (value => 0);
   setLightBloomDef (value => 0);
   setLightBloomLuck (value => 0);
   setMushroomGrenadeIsShown (current => false);
   setMushroomGrenadeActive (current => false);
   setMushroomGrenadeAtk (value => 0);
   setMushroomGrenadeDef (value => 0);
   setMushroomGrenadeLuck (value => 0);
   setNivaliGlovesIsShown (current => false);
   setNivaliGlovesActive (current => false);
   setNivaliGlovesAtk (value => 0);
   setNivaliGlovesDef (value => 0);
   setNivaliGlovesLuck (value => 0);
   setNivaliPantsIsShown (current => false);
   setNivaliPantsActive (current => false);
   setNivaliPantsAtk (value => 0);
   setNivaliPantsDef (value => 0);
   setNivaliPantsLuck (value => 0);
   setNivaliShieldIsShown (current => false);
   setNivaliShieldActive (current => false);
   setNivaliShieldAtk (value => 0);
   setNivaliShieldDef (value => 0);
   setNivaliShieldLuck (value => 0);
   setRainaBraceletIsShown (current => false);
   setRainaBraceletActive (current => false);
   setRainaBraceletAtk (value => 0);
   setRainaBraceletDef (value => 0);
   setRainaBraceletLuck (value => 0);
   setRustyAmuletIsShown (current => false);
   setRustyAmuletActive (current => false);
   setRustyAmuletAtk (value => 0);
   setRustyAmuletDef (value => 0);
   setRustyAmuletLuck (value => 0);
   setRustyPendantIsShown (current => false);
   setRustyPendantActive (current => false);
   setRustyPendantAtk (value => 0);
   setRustyPendantDef (value => 0);
   setRustyPendantLuck (value => 0);
   setSandsRingIsShown (current => false);
   setSandsRingActive (current => false);
   setSandsRingAtk (value => 0);
   setSandsRingDef (value => 0);
   setSandsRingLuck (value => 0);
   setVictorianFanIsShown (current => false);
   setVictorianFanActive (current => false);
   setVictorianFanAtk (value => 0);
   setVictorianFanDef (value => 0);
   setVictorianFanLuck (value => 0);
   setGradScrollAstrologyIsShown (current => false);
   setGradScrollAstrologyActive (current => false);
   setGradScrollAstrologyAtk (value => 0);
   setGradScrollAstrologyDef (value => 0);
   setGradScrollAstrologyLuck (value => 0);
   setGradScrollAlchemyIsShown (current => false);
   setGradScrollAlchemyActive (current => false);
   setGradScrollAlchemyAtk (value => 0);
   setGradScrollAlchemyDef (value => 0);
   setGradScrollAlchemyLuck (value => 0);
   setGradScrollAKIsShown (current => false);
   setGradScrollAKActive (current => false);
   setGradScrollAKAtk (value => 0);
   setGradScrollAKDef (value => 0);
   setGradScrollAKLuck (value => 0);
   setGradScrollSpellsIsShown (current => false);
   setGradScrollSpellsActive (current => false);
   setGradScrollSpellsAtk (value => 0);
   setGradScrollSpellsDef (value => 0);
   setGradScrollSpellsLuck (value => 0);
   setGradScrollMirrorsIsShown (current => false);
   setGradScrollMirrorsActive (current => false);
   setGradScrollMirrorsAtk (value => 0);
   setGradScrollMirrorsDef (value => 0);
   setGradScrollMirrorsLuck (value => 0);
   setGradScrollFungiIsShown (current => false);
   setGradScrollFungiActive (current => false);
   setGradScrollFungiAtk (value => 0);
   setGradScrollFungiDef (value => 0);
   setGradScrollFungiLuck (value => 0);
}

const handleGradScrollVoidNoClick = event => {


}


{AakultaHelmetIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/0/07/AakultaHelmet.png/'
   />}
   {AakultaHelmetIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Aakulta Helmet</Text>
     }

{CrestedHelmetIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f8/CrestedHelmet.png/'
   />}
   {CrestedHelmetIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Crested Helmet</Text>
     }

{DarkForestHelmetIsShown &&        
      <Image
      style={{position:'absolute'}}
      mt={['37px', '47px', '55px']}
      align='center' 
      boxSize={['4rem', '4.5rem', '5rem']}
      src='https://static.wikia.nocookie.net/4thewords/images/9/9f/Dark-forest-helmet.png/'
      />}
      {DarkForestHelmetIsShown &&        
      <Text        
      style={{position:'absolute'}}
      mt={['110px', '130px', '145px']}
      fontSize={['sm', 'md', 'md']}>
        Poe Pick</Text>
        }
   
{DragonHornedHelmetIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/DragonHornedHelmet.png/'
   />}
   {DragonHornedHelmetIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{FabricHelmetIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/FabricHelmet.png/'
   />}
   {FabricHelmetIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GlassNecklaceIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GlassNecklace.png/'
   />}
   {GlassNecklaceIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GoldenDragonTiaraIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GoldenDragonTiara.png/'
   />}
   {GoldenDragonTiaraIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{HauntedNecklaceIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/HauntedNecklace.png/'
   />}
   {HauntedNecklaceIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

     {HopeLightIsShown &&        
      <Image
      style={{position:'absolute'}}
      mt={['37px', '47px', '55px']}
      align='center' 
      boxSize={['4rem', '4.5rem', '5rem']}
      src='https://static.wikia.nocookie.net/4thewords/images/f/f0/HopeLight.png/'
      />}
      {HopeLightIsShown &&        
      <Text        
      style={{position:'absolute'}}
      mt={['110px', '130px', '145px']}
      fontSize={['sm', 'md', 'md']}>
        Poe Pick</Text>
        }
   
{LightBloomIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/LightBloom.png/'
   />}
   {LightBloomIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{MushroomGrenadeIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/MushroomGrenade.png/'
   />}
   {MushroomGrenadeIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{NivaliGlovesIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/NivaliGloves.png/'
   />}
   {NivaliGlovesIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{NivaliPantsIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/NivaliPants.png/'
   />}
   {NivaliPantsIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{NivaliShieldIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/NivaliShield.png/'
   />}
   {NivaliShieldIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{RainaBraceletIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/RainaBracelet.png/'
   />}
   {RainaBraceletIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{RustyAmuletIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/RustyAmulet.png/'
   />}
   {RustyAmuletIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{RustyPendantIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/RustyPendant.png/'
   />}
   {RustyPendantIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{SandsRingIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/SandsRing.png/'
   />}
   {SandsRingIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{VictorianFanIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/VictorianFan.png/'
   />}
   {VictorianFanIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollAstrologyIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollAstrology.png/'
   />}
   {GradScrollAstrologyIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollAlchemyIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollAlchemy.png/'
   />}
   {GradScrollAlchemyIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollAKIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollAK.png/'
   />}
   {GradScrollAKIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollSpellsIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollSpells.png/'
   />}
   {GradScrollSpellsIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollMirrorsIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollMirrors.png/'
   />}
   {GradScrollMirrorsIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollFungiIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollFungi.png/'
   />}
   {GradScrollFungiIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollThreadsIsShown &&        
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center' 
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollThreads.png/'
   />}
   {GradScrollThreadsIsShown &&        
   <Text        
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
     Poe Pick</Text>
     }

{GradScrollVoidIsShown &&   	 
   <Image
   style={{position:'absolute'}}
   mt={['37px', '47px', '55px']}
   align='center'
   boxSize={['4rem', '4.5rem', '5rem']}
   src='https://static.wikia.nocookie.net/4thewords/images/f/f0/GradScrollVoid.png/'
   />}
   {GradScrollVoidIsShown &&   	 
   <Text   	 
   style={{position:'absolute'}}
   mt={['110px', '130px', '145px']}
   fontSize={['sm', 'md', 'md']}>
 	Poe Pick</Text>
 	}



{(AllIsShown || ###LOCATION###) && !AakultaHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleAakultaHelmetClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/0/07/AakultaHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Aakulta Helmet</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+0 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && AakultaHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleAakultaHelmetNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/0/07/AakultaHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Aakulta Helmet</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+0 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !CrestedHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleCrestedHelmetClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/f/f8/CrestedHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Crested Helmet</b></Text>
<Text fontSize='sm' align='center'>+10 Atk<br/>+5 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && CrestedHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleCrestedHelmetNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/f/f8/CrestedHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Crested Helmet</b></Text>
<Text fontSize='sm' align='center'>+10 Atk<br/>+5 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}
{(AllIsShown || ###LOCATION###) && !DarkForestHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleDarkForestHelmetClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/9/9f/Dark-forest-helmet.png/'
/> 
<Text fontSize='md' align='center'><b>Dark Forest Helmet</b></Text>
<Text fontSize='sm' align='center'>+2 Atk<br/>+12 Def<br/>+4 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && DarkForestHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleDarkForestHelmetNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/9/9f/Dark-forest-helmet.png/'
/> 
<Text fontSize='md' align='center'><b>Dark Forest Helmet</b></Text>
<Text fontSize='sm' align='center'>+2 Atk<br/>+12 Def<br/>+4 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !DragonHornedHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleDragonHornedHelmetClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/e/e5/DragonsHornedHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Dragon's Horned Helmet</b></Text>
<Text fontSize='sm' align='center'>+2 Atk<br/>+5 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && DragonHornedHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleDragonHornedHelmetNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='https://static.wikia.nocookie.net/4thewords/images/e/e5/DragonsHornedHelmet.png/'
/> 
<Text fontSize='md' align='center'><b>Dragon's Horned Helmet</b></Text>
<Text fontSize='sm' align='center'>+2 Atk<br/>+5 Def<br/>+5 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !FabricHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleFabricHelmetClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && FabricHelmetIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleFabricHelmetNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GlassNecklaceIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleGlassNecklaceClick} style={{ backgroundColor: "#2D3748"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   
   {(AllIsShown || ###LOCATION###) && GlassNecklaceIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleGlassNecklaceNoClick} style={{ backgroundColor: "#211742"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}

   {(AllIsShown || ###LOCATION###) && !GoldenDragonTiaraIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleGoldenDragonTiaraClick} style={{ backgroundColor: "#2D3748"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}
      
      {(AllIsShown || ###LOCATION###) && GoldenDragonTiaraIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleGoldenDragonTiaraNoClick} style={{ backgroundColor: "#211742"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}

{(AllIsShown || ###LOCATION###) && !HauntedNecklaceIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleHauntedNecklaceClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && HauntedNecklaceIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleHauntedNecklaceNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !HopeLightIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleHopeLightClick} style={{ backgroundColor: "#2D3748"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   
   {(AllIsShown || ###LOCATION###) && HopeLightIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleHopeLightNoClick} style={{ backgroundColor: "#211742"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}

   {(AllIsShown || ###LOCATION###) && !LightBloomIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleLightBloomClick} style={{ backgroundColor: "#2D3748"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}
      
      {(AllIsShown || ###LOCATION###) && LightBloomIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleLightBloomNoClick} style={{ backgroundColor: "#211742"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}

{(AllIsShown || ###LOCATION###) && !MushroomGrenadeIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleMushroomGrenadeClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && MushroomGrenadeIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleMushroomGrenadeNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !NivaliGlovesIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleNivaliGlovesClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && NivaliGlovesIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleNivaliGlovesNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !NivaliPantsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleNivaliPantsClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && NivaliPantsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleNivaliPantsNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !NivaliShieldIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleNivaliShieldClick} style={{ backgroundColor: "#2D3748"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   
   {(AllIsShown || ###LOCATION###) && NivaliShieldIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleNivaliShieldNoClick} style={{ backgroundColor: "#211742"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}

   {(AllIsShown || ###LOCATION###) && !RainaBraceletIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleRainaBraceletClick} style={{ backgroundColor: "#2D3748"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}
      
      {(AllIsShown || ###LOCATION###) && RainaBraceletIsShown &&
      <WrapItem>
      <Button w='110px' h='170px' pb={5} onClick={handleRainaBraceletNoClick} style={{ backgroundColor: "#211742"}}>
      <VStack justify='center'>  
      <Image
      mt='12px'
      align='center' 
      boxSize='4rem'
      src='link'
      /> 
      <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
      <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
      </VStack>
      </Button>
      </WrapItem>}

{(AllIsShown || ###LOCATION###) && !RustyAmuletIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleRustyAmuletClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && RustyAmuletIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleRustyAmuletNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !RustyPendantIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleRustyPendantClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && RustyPendantIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleRustyPendantNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !SandsRingIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleSandsRingClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && SandsRingIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleSandsRingNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !VictorianFanIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleVictorianFanClick} style={{ backgroundColor: "#2D3748"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   
   {(AllIsShown || ###LOCATION###) && VictorianFanIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleVictorianFanNoClick} style={{ backgroundColor: "#211742"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center' 
   boxSize='4rem'
   src='link'
   /> 
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}

   {(AllIsShown || ###LOCATION###) && !GradScrollAstrologyIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAstrologyClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollAstrologyIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAstrologyNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollAlchemyIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAlchemyClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollAlchemyIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAlchemyNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollAKIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAKClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollAKIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollAKNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollSpellsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollSpellsClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollSpellsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollSpellsNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollMirrorsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollMirrorsClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollMirrorsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollMirrorsNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollFungiIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollFungiClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollFungiIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollFungiNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollThreadsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollThreadsClick} style={{ backgroundColor: "#2D3748"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && GradScrollThreadsIsShown &&
<WrapItem>
<Button w='110px' h='170px' pb={5} onClick={handleGradScrollThreadsNoClick} style={{ backgroundColor: "#211742"}}>
<VStack justify='center'>  
<Image
mt='12px'
align='center' 
boxSize='4rem'
src='link'
/> 
<Text fontSize='md' align='center'><b>Poe Pick</b></Text>
<Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
</VStack>
</Button>
</WrapItem>}

{(AllIsShown || ###LOCATION###) && !GradScrollVoidIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleGradScrollVoidClick} style={{ backgroundColor: "#2D3748"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center'
   boxSize='4rem'
   src='link'
   />
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   
   {(AllIsShown || ###LOCATION###) && GradScrollVoidIsShown &&
   <WrapItem>
   <Button w='110px' h='170px' pb={5} onClick={handleGradScrollVoidNoClick} style={{ backgroundColor: "#211742"}}>
   <VStack justify='center'>  
   <Image
   mt='12px'
   align='center'
   boxSize='4rem'
   src='link'
   />
   <Text fontSize='md' align='center'><b>Poe Pick</b></Text>
   <Text fontSize='sm' align='center'>+15 Atk<br/>+5 Def<br/>+0 Luck </Text>
   </VStack>
   </Button>
   </WrapItem>}
   